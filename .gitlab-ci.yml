# a single stage allows test to run even if flake8 fails,
# and makes it possible to get all the errors at once
stages:
  - pre_release
  - release
  - deploy

.flake8:
  tags:
    - linux
  image: python:3
  stage: pre_release
  script:
    - pip install flake8==3.7.9 flake8-black pep8-naming flake8-bugbear
    - flake8 -v

zip:
  tags:
    - linux
  stage: pre_release
  script:
    - cp CHANGELOG.md README.md mixer/
  artifacts:
    name: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
    paths:
      - mixer
    expire_in: 1 week

.on_version_tag: &tpl_on_version_tag
  only:
    refs:
      - /^v[0-9]+.[0-9]+.[0-9]+$/

release:
  <<: *tpl_on_version_tag
  dependencies:
    - zip
  tags:
    - linux
  image: python:3
  stage: release
  script:
    - pip install requests
    - python -m zipfile -c mixer-${CI_COMMIT_REF_NAME}.zip mixer/
    - python -m gitlab.release mixer-${CI_COMMIT_REF_NAME}.zip
  artifacts:
    paths:
      - mixer-${CI_COMMIT_REF_NAME}.zip

# https://gitlab-ncsa.ubisoft.org/help/ci/yaml/README.md
.unittest:
  stage: pre_release
  tags:
    - blender
  variables:
    MIXER_BLENDER_ZIP_BASENAME: blender-2.82a-windows64
    MIXER_BLENDER_VERSION_BASE: "2.82"
    MIXER_BASH_EXE: C:\Program Files\Git\bin\bash.exe
  script:
    - gitlab\run_unittest.bat
  cache:
    paths:
      - gitlab/blender/cache

deploy:network_common:
  <<: *tpl_on_version_tag
  stage: deploy
  tags:
    - uas
  variables:
    MIXER_BASH_EXE: C:\Program Files\Git\bin\bash.exe
  dependencies:
    - release
  environment:
    name: network_common
  script:
    - %MIXER_BASH_EXE% gitlab\deploy_network_common.sh mixer-${CI_COMMIT_REF_NAME}.zip
  when: manual